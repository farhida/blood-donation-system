Slide 1 — Title
Title: Blood Donation System
Subtitle: Django REST backend + React frontend
Presenter: <Your name>
Date: <Date>
Repo: <paste GitHub URL>

Speaker note: One-line project summary and your role.

---

Slide 2 — Agenda
- Problem & goals
- Tech stack & architecture
- Features mapped to requirements
- DB & CRUD
- Auth & admin
- Frontend pages, routing & styling
- Demo (screenshots + code snippets)
- How to run
- Next steps / Q&A

Speaker note: Quick roadmap for the talk.

---

Slide 3 — Problem & Goals
- Problem: connect donors with people who need blood; manage requests & inventory
- Goals: CRUD, auth, admin, polished UI, 6+ pages, dynamic routing, backend framework

Speaker note: State why these features matter (privacy, speed, admin oversight).

---

Slide 4 — Tech Stack
- Backend: Django, Django REST Framework, SimpleJWT
- Database: SQLite default, supports Postgres/MySQL via DATABASE_URL (dj-database-url)
- Frontend: React (Create React App), React Router, Axios
- Styling: single theme in `frontend/src/App.css`

Speaker note: Short justification for each choice (Django for quick API + admin).

---

Slide 5 — Architecture (diagram)
- Browser -> React SPA -> /api -> Django REST -> DB
- Admin: Django admin at /admin/ + frontend admin pages using admin API

Speaker note: Explain separation of concerns and deployment considerations.

---

Slide 6 — Requirements mapping
- CRUD + DB: implemented via Django models & DRF views (Requests, Donation, Inventory, Notification, UserProfile)
- Auth: Registration + Login + JWT tokens
- Admin: Django admin + frontend admin pages (users & requests)

Speaker note: Short checklist mapping to acceptance criteria.

---

Slide 7 — Feature index (full)
For each feature below there is:
 - A backend model/serializer/view snippet
 - A frontend component snippet
 - A screenshot placeholder you can replace before presenting

1) User registration & profile
2) Login & JWT auth
3) Donor search (privacy-aware)
4) Requests CRUD (create, list, accept)
5) Donation flow (accept → collected)
6) Inventory (admin view)
7) Notifications (simple model + endpoint)
8) Admin pages (Django admin + frontend admin)

---

Slide 8 — 1) Registration & Profile
Backend (Django model + serializer):
```python
# backend/core/models.py (excerpt)
from django.db import models
from django.contrib.auth.models import User

class UserProfile(models.Model):
  user = models.OneToOneField(User, on_delete=models.CASCADE)
  phone = models.CharField(max_length=32, blank=True, null=True)
  share_phone = models.BooleanField(default=False)
  last_donation = models.DateField(blank=True, null=True)

  def is_available(self, cutoff_days=90):
    if not self.last_donation:
      return True
    return (timezone.now().date() - self.last_donation).days >= cutoff_days
```

Serializer + view (backend/accounts/serializers.py and views):
```python
from rest_framework import serializers
from django.contrib.auth.models import User

class RegistrationSerializer(serializers.ModelSerializer):
  class Meta:
    model = User
    fields = ('username','email','password')
    extra_kwargs = {'password': {'write_only': True}}

  def create(self, validated_data):
    user = User.objects.create_user(**validated_data)
    # create profile
    UserProfile.objects.create(user=user)
    return user
```

Frontend (Register.js):
```javascript
// frontend/src/pages/Register.js (excerpt)
async function submit(data){
  const res = await fetch('/api/auth/register/', {
  method: 'POST', headers:{'Content-Type':'application/json'},
  body: JSON.stringify(data)
  });
  return res.json();
}
```

Screenshot placeholder: [REGISTER_PAGE_IMAGE]

---

Slide 9 — 2) Login & JWT
Backend (TokenObtainPairView used):
```python
# backend/accounts/urls.py
from rest_framework_simplejwt.views import TokenObtainPairView
urlpatterns = [
  path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
]
```

Frontend (Login.js):
```javascript
async function login(creds){
  const r = await fetch('/api/token/', {
  method: 'POST', headers:{'Content-Type':'application/json'},
  body: JSON.stringify(creds)
  });
  const data = await r.json();
  localStorage.setItem('access', data.access);
}
```

Screenshot placeholder: [LOGIN_PAGE_IMAGE]

---

Slide 10 — 3) Donor search (privacy-aware)
Backend view (donors search):
```python
from rest_framework.views import APIView
from rest_framework.response import Response

class DonorSearchView(APIView):
  def get(self, request):
    q = request.query_params.get('q','')
    profiles = UserProfile.objects.filter(user__username__icontains=q)
    result = []
    for p in profiles:
      item = {'name': p.user.get_full_name(), 'blood_type': getattr(p,'blood_type',None)}
      if p.share_phone:
        item['phone'] = p.phone
      result.append(item)
    return Response(result)
```

Frontend (DonorSearch.js):
```javascript
async function search(q){
  const res = await fetch(`/api/donors/search/?q=${encodeURIComponent(q)}`);
  return res.json();
}

// render: show phone only if present in response
```

Screenshot placeholder: [DONOR_SEARCH_IMAGE]

---

Slide 11 — 4) Requests CRUD (create/list/accept)
Backend model + serializer:
```python
class Request(models.Model):
  requester = models.ForeignKey(UserProfile, on_delete=models.CASCADE)
  blood_type = models.CharField(max_length=5)
  location = models.CharField(max_length=128)
  created = models.DateTimeField(auto_now_add=True)
  status = models.CharField(max_length=20, default='open')

class RequestSerializer(serializers.ModelSerializer):
  class Meta: model = Request; fields = '__all__'
```

View (list/create + accept action):
```python
from rest_framework import viewsets

class RequestViewSet(viewsets.ModelViewSet):
  queryset = Request.objects.all()
  serializer_class = RequestSerializer

  @action(detail=True, methods=['post'])
  def accept(self, request, pk=None):
    req = self.get_object()
    req.status = 'accepted'
    req.save()
    # create Donation record etc.
    return Response({'ok': True})
```

Frontend (RequestCreate.js):
```javascript
async function createRequest(body){
  const token = localStorage.getItem('access');
  await fetch('/api/requests/', {method:'POST', headers:{'Content-Type':'application/json', 'Authorization': `Bearer ${token}`}, body: JSON.stringify(body)});
}
```

Screenshot placeholder: [REQUEST_CREATE_IMAGE]

---

Slide 12 — 5) Donation flow
Backend (Donation model & simple flow):
```python
class Donation(models.Model):
  donor = models.ForeignKey(UserProfile, on_delete=models.CASCADE)
  request = models.ForeignKey(Request, on_delete=models.CASCADE)
  collected = models.BooleanField(default=False)
  created = models.DateTimeField(auto_now_add=True)
```

Action: user accepts a request -> create Donation -> donor marks collected -> adjust inventory

Frontend placeholder: accept flow + mark collected component

Screenshot placeholder: [DONATION_FLOW_IMAGE]

---

Slide 13 — 6) Inventory (admin)
Backend: Inventory model and admin list display (for staff)

Admin screenshot placeholder: [INVENTORY_ADMIN_IMAGE]

---

Slide 14 — 7) Notifications
Backend simple model + endpoint:
```python
class Notification(models.Model):
  user = models.ForeignKey(User, on_delete=models.CASCADE)
  message = models.TextField()
  created = models.DateTimeField(auto_now_add=True)
```

Endpoint: GET /api/notifications/ and POST to create for events (accept/collected)

Frontend: Notifications panel fetches `/api/notifications/` and shows them

Screenshot placeholder: [NOTIFICATIONS_IMAGE]

---

Slide 15 — 8) Admin pages
- Backend: all models registered in Django admin (`/admin/`) for Requests, UserProfile, Donation, Inventory
- Frontend: AdminUsers page (frontend/src/pages/AdminUsers.js) that calls admin-protected endpoints

Screenshot placeholders: [DJANGO_ADMIN_IMAGE] [FRONTEND_ADMIN_USERS_IMAGE]

---

Slide 16 — Deployment helpers (what's in this repo)
- `render_build.sh` — runs migrate, loaddata prod_fixture.json, collectstatic during Render build.
- `prod_fixture.json` — a serialized dump of `auth` + `core` to seed production DB without shell access.

Snippet (render_build.sh):
```bash
# run during Render build
pip install -r backend/requirements.txt
cd backend
python manage.py migrate --noinput || (python manage.py migrate core 0001 --fake && python manage.py migrate --noinput)
if [ -f ../prod_fixture.json ]; then python manage.py loaddata ../prod_fixture.json; fi
python manage.py collectstatic --noinput
```

Screenshot placeholder: [DEPLOY_BUILD_LOG_IMAGE]

---

Slide 17 — Code samples to paste in slides (copyable)
- Registration POST (frontend):
```javascript
fetch('/api/auth/register/', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({username:'alice', email:'a@b.c', password:'s3cret'})})
```

- Search donors:
```javascript
fetch('/api/donors/search/?q=ali').then(r=>r.json()).then(console.log)
```

- Accept request (backend API):
```bash
curl -X POST -H "Authorization: Bearer $TOKEN" https://your-backend/api/requests/123/accept/
```

---

Slide 18 — How to run (local, concise)
Backend (Windows):
```bash
python -m venv .venv
.venv\Scripts\activate
pip install -r backend/requirements.txt
cd backend
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver
```

Frontend:
```bash
cd frontend/blood-donation-frontend
npm install
npm start
```

---

Slide 19 — Tests & QA (quick)
- Run backend tests: `cd backend && python manage.py test`
- Suggested tests: registration, login, request create/accept, donor search privacy

---

Slide 20 — Security & production checklist
- SECRET_KEY in env
- DEBUG=False in production
- ALLOWED_HOSTS set
- HTTPS and strong DB credentials
- Migrations run safely (idempotent migration created for legacy columns)

---

Slide 21 — Demo flow (live)
1) Run backend & frontend
2) Register user → show Register page [REGISTER_PAGE_IMAGE]
3) Login → show token stored [LOGIN_PAGE_IMAGE]
4) Edit profile (toggle share_phone) → show effect on donor search [PROFILE_EDIT_IMAGE]
5) Create request → accept from another account → mark collected [REQUEST_FLOW_IMAGE]
6) Show admin edit in Django admin [DJANGO_ADMIN_IMAGE]

---

Slide 22 — Appendix: file locations for code & screenshots
- backend/core/models.py (UserProfile)
- backend/donors/models.py (Request, Donation)
- backend/accounts/serializers.py (Registration)
- backend/accounts/urls.py (Token endpoints)
- backend/donors/views.py (Donor search & request viewset)
- frontend/src/pages/Register.js
- frontend/src/pages/Login.js
- frontend/src/pages/DonorSearch.js
- frontend/src/pages/RequestCreate.js

Screenshot replacement instructions: replace placeholder tokens (e.g. [REGISTER_PAGE_IMAGE]) with image paths or embed slides in your presentation tool.

---

Slide 23 — Closing summary
"The project implements all requested features: CRUD, auth, admin, themed frontend with routing, and deployment helpers for Render/Vercel. The included code snippets and screenshot placeholders make it easy to assemble a complete demo." 

Appendix: contact / repo link
- Repo root: <paste repo URL>
- Tell me presenter name/date and I will update the Title slide and regenerate a PDF-friendly version if you want.

End of presentation file.
Presentation: Blood Donation System

Slide 1 — Title
Project: Blood Donation System
Stack: Django (DRF) backend, React frontend
Presenter: <Your name>
Date: <Date>
Repo: <GitHub URL>

Slide 2 — One-line summary
A production-ready donor-request system: Django REST API with JWT auth, React SPA with themed UI, multi-DB support, admin tools, and deployment helpers for Render/Vercel.

Slide 3 — Checklist (requirements)
- CRUD + multi-DB support (sqlite, mysql, postgresql) — YES
- Authorization (register & login) — YES
- Admin page (Django admin + frontend admin) — YES
- Styling & consistent theme — YES
- 6+ pages — YES
- Dynamic routing — YES
- Backend framework used — YES (Django + DRF)

Slide 4 — Architecture overview (short)
- Browser (React SPA) -> /api -> Django REST -> DB
- Admin: Django admin at /admin/ and frontend admin pages calling admin APIs
- Static files served with WhiteNoise in production

Slide 5 — How to run (short, local)
Backend:
```
# Windows
python -m venv .venv
.venv\\Scripts\\activate
pip install -r backend/requirements.txt
cd backend
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver
```
Frontend:
```
cd frontend/blood-donation-frontend
npm install
npm start
```

Slide 6 — Key API endpoints (short list)
- POST /api/auth/register/  — register
- POST /api/login/          — login (custom view, returns JWT)
- POST /api/token/          — standard TokenObtainPairView
- GET  /api/donors/search/  — public donor search
- GET/POST /api/requests/   — list/create requests (auth required to create)
- GET  /admin/              — Django admin UI

Slide 7 — Privacy & availability (short)
- Phone privacy: `UserProfile` model includes `phone` and `share_phone`. Ensure `PublicDonorSearch` returns `phone` only when `share_phone` is True.
- Availability: governed by `last_donation` (users are available if null or older than cutoff).

Slide 8 — Deployment notes (short)
- Backend on Render (Neon Postgres): set `DATABASE_URL`, `DJANGO_SECRET_KEY`, `ALLOWED_HOSTS`. Use `render_build.sh` included in repo to run migrate, loaddata (fixture), collectstatic.
- Frontend on Vercel: point to `frontend/blood-donation-frontend` and use default build step.

Slide 9 — Short demo script (what to show)
1) Register a new user
2) Login and visit Dashboard
3) Edit Profile (set share_phone true/false)
4) Create a Request and show Notification
5) Admin: edit user from frontend admin and/or Django /admin/

Slide 10 — Small code snippets to include in slides
Register (frontend):
```javascript
fetch('/api/auth/register/', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ full_name: 'Alice', email: 'alice@example.com', password: 's3cret' })
}).then(r => r.json()).then(console.log)
```
Login (curl):
```bash
curl -X POST https://your-backend/api/login/ -H "Content-Type: application/json" -d '{"username":"alice","password":"s3cret"}'
```

Slide 11 — Where to paste code snippets from repo (appendix)
- Models: `backend/core/models.py` (UserProfile, Request)
- Registration serializer: `backend/api/serializers_accounts.py`
- Login view: `backend/api/donors.py` (LoginView)
- Routes: `backend/api/urls.py`, `frontend/src/app/App.js`
- Settings (DB switch): `backend/blood_donation/settings.py` (dj_database_url usage)

Slide 12 — Recommended next steps
- Confirm `PublicDonorSearch` hides phone unless `share_phone` is True (I can patch serializer if you want).
- Add 3–5 smoke tests for register/login/search.
- Make `loaddata` idempotent or guard fixture loading to avoid duplicates on repeated deploys.

Slide 13 — Single-slide summary to close
"The project meets all requested criteria: a Django REST backend with multi-DB support and admin tools, plus a React frontend with routing and consistent theme. It’s ready for Render/Vercel deployment with included build helpers."

Appendix: contact / repo link
- Repo root: <paste repo URL>
- If you want, tell me the exact text for presenter name/date and I will update this file accordingly.
Code snippet placeholder:
- Paste 10–15 lines from App.css showing :root variables and .card style.

---

Slide 13 — Demo flow (what you'll show live)
- Steps:
  1. Run backend and frontend
  2. Register a new donor (show Register)
  3. Login as donor (show Dashboard & Profile)
  4. Create a request (show Requests -> create -> notifications)
  5. Login as another donor and Accept -> Mark as Collected (show Donation created)
  6. Show AdminUsers edit flow and Django admin

Speaker note: Indicate how long each demo step will take (~2 min each).

Screenshot placeholders by step:
- Step 2: Register page screenshot
- Step 3: Dashboard screenshot
- Step 4: Create Request screenshot and Notifications list
- Step 5: Accept + Collected action screenshot
- Step 6: Admin Users edit screenshot and Django /admin/ screenshot

---

Slide 14 — Code walk (important snippets)
- Models: backend/donors/models.py (UserProfile, Request)
- Serializer create: backend/accounts/serializers.py (registration)
- Login & JWT: backend/donors/views.py LoginView or api/token/
- API routes: backend/blood_donation/urls.py, backend/donors/urls.py
- React routes: frontend/src/App.js
- Register submit: frontend/src/pages/Register.js
- Admin edit: frontend/src/pages/AdminUsers.js

Speaker note: For each snippet slide, show ~12–20 lines of code and explain the input/output contract.

---

Slide 15 — How to run (copyable commands)
Backend steps:
python -m venv .venv
source .venv/bin/activate   # windows: .venv\\Scripts\\activate
pip install -r requirements.txt
cd backend
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver

Frontend steps:
cd frontend
npm install
npm start

Speaker note: Mention DATABASE_URL env var to switch DB for production.

---

Slide 16 — Tests & QA
- Run backend tests:
cd backend
python manage.py test
- Suggested tests: registration, login, request create/accept/collected, notifications, admin user edits.

Speaker note: Recommend 3-5 automated tests for CI.

---

Slide 17 — Security & Production notes
- Move SECRET_KEY to env and set DEBUG=False in production
- Ensure ALLOWED_HOSTS, SECURE_* settings configured
- Use HTTPS and strong DB credentials

Speaker note: Quick checklist for deploying safely.

---

Slide 18 — Next steps & improvements
- Add automated CI (tests + lint)
- Add email notifications for accepted requests
- Improve accessibility & i18n
- Add analytics dashboard and reporting

Speaker note: Prioritize as per stakeholder needs.

---

Slide 19 — Appendix (where to paste code & screenshots)
Code snippet paste locations:
- backend/donors/models.py (UserProfile or Request)
- backend/accounts/serializers.py (create)
- backend/donors/views.py (LoginView)
- backend/donors/urls.py
- backend/blood_donation/settings.py (DATABASE_URL parsing)
- frontend/src/App.js (routes)
- frontend/src/pages/Register.js
- frontend/src/pages/AdminUsers.js

Screenshot recommendations (pages):
- DonorSearch (/donors)
- Register (/register)
- Login (/login)
- Dashboard (/dashboard)
- Requests (/requests)
- Notifications (/notifications)
- AdminUsers (/admin/users)
- Django admin (/admin/)

Speaker note: Keep screenshots clipped to the content area and include the route in the capture.

---

Slide 20 — Thank you / Q&A
- Contact / repo link
- Offer live demo

Speaker note: Wrap up and invite questions.

---

End of presentation file.
